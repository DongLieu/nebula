// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nebula/launchpad/project.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Project struct {
	// Project owner
	ProjectOwner string `protobuf:"bytes,1,opt,name=project_owner,json=projectOwner,proto3" json:"project_owner,omitempty" yaml:"project_owner"`
	// Project title
	ProjectTitle string `protobuf:"bytes,2,opt,name=project_title,json=projectTitle,proto3" json:"project_title,omitempty" yaml:"project_title"`
	// Project unique id of each project (incremental from 1)
	ProjectId uint64 `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" yaml:"project_id"`
	// Project address to store assets
	ProjectAddress string `protobuf:"bytes,4,opt,name=project_address,json=projectAddress,proto3" json:"project_address,omitempty" yaml:"project_address"`
	// Project information
	ProjectInformation string `protobuf:"bytes,6,opt,name=project_information,json=projectInformation,proto3" json:"project_information,omitempty" yaml:"project_information"`
	// Project status
	ProjectStatus uint64 `protobuf:"varint,7,opt,name=project_status,json=projectStatus,proto3" json:"project_status,omitempty" yaml:"project_status"`
	// Registered Release Mechanism
	RegisteredRm []*types.Any `protobuf:"bytes,8,rep,name=registered_rm,json=registeredRm,proto3" json:"registered_rm,omitempty" yaml:"registered_rm"`
	// Project verified
	ProjectVerified bool `protobuf:"varint,9,opt,name=project_verified,json=projectVerified,proto3" json:"project_verified,omitempty" yaml:"project_verified"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_93486831bf46c6ec, []int{0}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetProjectOwner() string {
	if m != nil {
		return m.ProjectOwner
	}
	return ""
}

func (m *Project) GetProjectTitle() string {
	if m != nil {
		return m.ProjectTitle
	}
	return ""
}

func (m *Project) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *Project) GetProjectAddress() string {
	if m != nil {
		return m.ProjectAddress
	}
	return ""
}

func (m *Project) GetProjectInformation() string {
	if m != nil {
		return m.ProjectInformation
	}
	return ""
}

func (m *Project) GetProjectStatus() uint64 {
	if m != nil {
		return m.ProjectStatus
	}
	return 0
}

func (m *Project) GetRegisteredRm() []*types.Any {
	if m != nil {
		return m.RegisteredRm
	}
	return nil
}

func (m *Project) GetProjectVerified() bool {
	if m != nil {
		return m.ProjectVerified
	}
	return false
}

func init() {
	proto.RegisterType((*Project)(nil), "nebula.launchpad.Project")
}

func init() { proto.RegisterFile("nebula/launchpad/project.proto", fileDescriptor_93486831bf46c6ec) }

var fileDescriptor_93486831bf46c6ec = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x6f, 0x58, 0xb5, 0xad, 0x66, 0x83, 0x2d, 0x74, 0x90, 0x15, 0x29, 0xa9, 0x72, 0xea, 0xa5,
	0xb1, 0x06, 0x9c, 0x90, 0x90, 0x58, 0x90, 0x90, 0x7a, 0x40, 0x43, 0x01, 0x71, 0xe0, 0x52, 0x39,
	0xc9, 0xd7, 0xd4, 0x28, 0x89, 0xa3, 0xd8, 0x19, 0xf4, 0x2d, 0x78, 0x18, 0xde, 0x01, 0xc4, 0x69,
	0x47, 0x4e, 0x11, 0x6a, 0xdf, 0x20, 0x4f, 0x80, 0x1a, 0xc7, 0xcb, 0x52, 0x89, 0x9b, 0x7f, 0xff,
	0x3e, 0xff, 0x6c, 0xcb, 0xc8, 0x4c, 0xc1, 0x2f, 0x62, 0x82, 0x63, 0x52, 0xa4, 0xc1, 0x32, 0x23,
	0x21, 0xce, 0x72, 0xf6, 0x05, 0x02, 0xe1, 0x64, 0x39, 0x13, 0x4c, 0x3f, 0x91, 0xba, 0x73, 0xab,
	0x8f, 0xcc, 0x80, 0xf1, 0x84, 0x71, 0xec, 0x13, 0x0e, 0xf8, 0xfa, 0xc2, 0x07, 0x41, 0x2e, 0x70,
	0xc0, 0x68, 0x2a, 0x13, 0x23, 0x2b, 0x62, 0x2c, 0x8a, 0x01, 0xd7, 0xc8, 0x2f, 0x16, 0x58, 0xd0,
	0x04, 0xb8, 0x20, 0x49, 0xd6, 0x18, 0xce, 0x77, 0x0d, 0x24, 0x5d, 0x29, 0x49, 0xce, 0x9e, 0xd7,
	0x08, 0x4b, 0xd0, 0x48, 0xc3, 0x88, 0x45, 0x4c, 0xf2, 0xdb, 0x95, 0x64, 0xed, 0x9f, 0x7d, 0x74,
	0xf0, 0x5e, 0x16, 0xd6, 0x5f, 0xa1, 0xe3, 0xa6, 0xfb, 0x9c, 0x7d, 0x4d, 0x21, 0x37, 0xb4, 0xb1,
	0x36, 0x19, 0xb8, 0x46, 0x55, 0x5a, 0xc3, 0x15, 0x49, 0xe2, 0x97, 0x76, 0x47, 0xb6, 0xbd, 0xa3,
	0x06, 0x5f, 0x6d, 0xe1, 0xdd, 0xb8, 0xa0, 0x22, 0x06, 0xe3, 0xde, 0xff, 0xe2, 0xb5, 0xdc, 0xc6,
	0x3f, 0x6e, 0xa1, 0xfe, 0x02, 0x21, 0xa5, 0xd3, 0xd0, 0xd8, 0x1b, 0x6b, 0x93, 0xbe, 0x7b, 0x56,
	0x95, 0xd6, 0x69, 0x37, 0x4b, 0x43, 0xdb, 0x1b, 0x34, 0x60, 0x16, 0xea, 0x6f, 0xd0, 0x43, 0xa5,
	0x90, 0x30, 0xcc, 0x81, 0x73, 0xa3, 0x5f, 0x6f, 0x3b, 0xaa, 0x4a, 0xeb, 0x71, 0x37, 0xda, 0x18,
	0x6c, 0xef, 0x41, 0xc3, 0x5c, 0x4a, 0x42, 0xbf, 0x42, 0x8f, 0x6e, 0xc7, 0xa7, 0x0b, 0x96, 0x27,
	0x44, 0x50, 0x96, 0x1a, 0xfb, 0xf5, 0x20, 0xb3, 0x2a, 0xad, 0xd1, 0x4e, 0x87, 0xd6, 0x64, 0x7b,
	0xba, 0x2a, 0xd3, 0x92, 0xfa, 0x6b, 0xa4, 0xb6, 0x98, 0x73, 0x41, 0x44, 0xc1, 0x8d, 0x83, 0xfa,
	0x3c, 0xe7, 0x55, 0x69, 0x9d, 0x75, 0x67, 0x49, 0xdd, 0xf6, 0xd4, 0xdd, 0x7d, 0xa8, 0xb1, 0xbe,
	0x44, 0xc7, 0x39, 0x44, 0x94, 0x0b, 0xc8, 0x21, 0x9c, 0xe7, 0x89, 0x71, 0x38, 0xde, 0x9b, 0xdc,
	0x7f, 0x36, 0x74, 0xe4, 0xdb, 0x3b, 0xea, 0xed, 0x9d, 0xcb, 0x74, 0xe5, 0x4e, 0xdb, 0x2b, 0xee,
	0x84, 0xec, 0xdf, 0x3f, 0xa6, 0xa7, 0x1e, 0xc4, 0x40, 0x38, 0xbc, 0x83, 0x60, 0x49, 0x52, 0xca,
	0x93, 0x99, 0x77, 0xd4, 0x9a, 0xbc, 0x44, 0x7f, 0x8b, 0x4e, 0x54, 0x97, 0x6b, 0xc8, 0xe9, 0x82,
	0x42, 0x68, 0x0c, 0xc6, 0xda, 0xe4, 0xd0, 0x7d, 0x5a, 0x95, 0xd6, 0x93, 0x6e, 0x5b, 0xe5, 0xb0,
	0x3d, 0x75, 0xed, 0x9f, 0x1a, 0xc6, 0x9d, 0xfd, 0x5a, 0x9b, 0xda, 0xcd, 0xda, 0xd4, 0xfe, 0xae,
	0x4d, 0xed, 0xfb, 0xc6, 0xec, 0xdd, 0x6c, 0xcc, 0xde, 0x9f, 0x8d, 0xd9, 0xfb, 0x8c, 0x23, 0x2a,
	0x96, 0x85, 0xef, 0x04, 0x2c, 0xc1, 0xf2, 0x37, 0x4c, 0x63, 0xe2, 0xf3, 0x66, 0x8d, 0xbf, 0xdd,
	0xf9, 0x3b, 0x62, 0x95, 0x01, 0xf7, 0xf7, 0xeb, 0xd3, 0x3d, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x4b, 0x63, 0xc2, 0x60, 0x5c, 0x03, 0x00, 0x00,
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectVerified {
		i--
		if m.ProjectVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.RegisteredRm) > 0 {
		for iNdEx := len(m.RegisteredRm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegisteredRm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ProjectStatus != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.ProjectStatus))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ProjectInformation) > 0 {
		i -= len(m.ProjectInformation)
		copy(dAtA[i:], m.ProjectInformation)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProjectInformation)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProjectAddress) > 0 {
		i -= len(m.ProjectAddress)
		copy(dAtA[i:], m.ProjectAddress)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProjectAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.ProjectId != 0 {
		i = encodeVarintProject(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProjectTitle) > 0 {
		i -= len(m.ProjectTitle)
		copy(dAtA[i:], m.ProjectTitle)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProjectTitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectOwner) > 0 {
		i -= len(m.ProjectOwner)
		copy(dAtA[i:], m.ProjectOwner)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProjectOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProject(dAtA []byte, offset int, v uint64) int {
	offset -= sovProject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectOwner)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.ProjectTitle)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	if m.ProjectId != 0 {
		n += 1 + sovProject(uint64(m.ProjectId))
	}
	l = len(m.ProjectAddress)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.ProjectInformation)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	if m.ProjectStatus != 0 {
		n += 1 + sovProject(uint64(m.ProjectStatus))
	}
	if len(m.RegisteredRm) > 0 {
		for _, e := range m.RegisteredRm {
			l = e.Size()
			n += 1 + l + sovProject(uint64(l))
		}
	}
	if m.ProjectVerified {
		n += 2
	}
	return n
}

func sovProject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProject(x uint64) (n int) {
	return sovProject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectInformation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectInformation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectStatus", wireType)
			}
			m.ProjectStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredRm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredRm = append(m.RegisteredRm, &types.Any{})
			if err := m.RegisteredRm[len(m.RegisteredRm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProjectVerified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProject = fmt.Errorf("proto: unexpected end of group")
)
