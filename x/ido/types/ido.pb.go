// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nebula/ido/ido.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AllocationLimit struct {
	Denom      string     `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	LowerLimit types.Coin `protobuf:"bytes,2,opt,name=lower_limit,json=lowerLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"lower_limit" yaml:"lower_limit"`
	UpperLimit types.Coin `protobuf:"bytes,3,opt,name=upper_limit,json=upperLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"upper_limit" yaml:"upper_limit"`
}

func (m *AllocationLimit) Reset()         { *m = AllocationLimit{} }
func (m *AllocationLimit) String() string { return proto.CompactTextString(m) }
func (*AllocationLimit) ProtoMessage()    {}
func (*AllocationLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9f0ba5df89bb51, []int{0}
}
func (m *AllocationLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocationLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocationLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationLimit.Merge(m, src)
}
func (m *AllocationLimit) XXX_Size() int {
	return m.Size()
}
func (m *AllocationLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationLimit.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationLimit proto.InternalMessageInfo

func (m *AllocationLimit) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AllocationLimit) GetLowerLimit() types.Coin {
	if m != nil {
		return m.LowerLimit
	}
	return types.Coin{}
}

func (m *AllocationLimit) GetUpperLimit() types.Coin {
	if m != nil {
		return m.UpperLimit
	}
	return types.Coin{}
}

type Entry struct {
	Participant  string                                   `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty" yaml:"participant"`
	CommitAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=commit_amount,json=commitAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"commit_amount" yaml:"commit_amount"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9f0ba5df89bb51, []int{1}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *Entry) GetCommitAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CommitAmount
	}
	return nil
}

type IDO struct {
	// Project unique id of each project
	ProjectId              uint64                                   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" yaml:"project_id"`
	TokenForDistribution   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=token_for_distribution,json=tokenForDistribution,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"token_for_distribution" yaml:"token_for_distribution"`
	TotalDistributedAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=total_distributed_amount,json=totalDistributedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_distributed_amount" yaml:"total_distributed_amount"`
	TokenListingPrice      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=token_listing_price,json=tokenListingPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"token_listing_price" yaml:"token_listing_price"`
	IdoStatus              uint64                                   `protobuf:"varint,5,opt,name=ido_status,json=idoStatus,proto3" json:"ido_status,omitempty" yaml:"ido_status"`
	AllocationLimit        []AllocationLimit                        `protobuf:"bytes,6,rep,name=allocation_limit,json=allocationLimit,proto3" json:"allocation_limit" yaml:"allocation_limit"`
	// Begin time for this ido
	StartTime time.Time `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// Record entry of participant
	Entries map[string]Entry `protobuf:"bytes,8,rep,name=entries,proto3" json:"entries" yaml:"entries" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *IDO) Reset()      { *m = IDO{} }
func (*IDO) ProtoMessage() {}
func (*IDO) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9f0ba5df89bb51, []int{2}
}
func (m *IDO) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDO.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDO.Merge(m, src)
}
func (m *IDO) XXX_Size() int {
	return m.Size()
}
func (m *IDO) XXX_DiscardUnknown() {
	xxx_messageInfo_IDO.DiscardUnknown(m)
}

var xxx_messageInfo_IDO proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AllocationLimit)(nil), "nebula.ido.AllocationLimit")
	proto.RegisterType((*Entry)(nil), "nebula.ido.Entry")
	proto.RegisterType((*IDO)(nil), "nebula.ido.IDO")
	proto.RegisterMapType((map[string]Entry)(nil), "nebula.ido.IDO.EntriesEntry")
}

func init() { proto.RegisterFile("nebula/ido/ido.proto", fileDescriptor_3c9f0ba5df89bb51) }

var fileDescriptor_3c9f0ba5df89bb51 = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x3f, 0x4f, 0xdb, 0x4c,
	0x1c, 0x8e, 0x09, 0x81, 0x37, 0x07, 0xef, 0x0b, 0xf1, 0x9b, 0xa6, 0x21, 0x2d, 0x31, 0xf2, 0x50,
	0xe8, 0x80, 0x2d, 0xda, 0x0e, 0x88, 0x8d, 0x10, 0xaa, 0x46, 0xe2, 0x4f, 0x6b, 0x3a, 0x54, 0x5d,
	0xac, 0xb3, 0x7d, 0x84, 0x2b, 0xb6, 0xcf, 0xf2, 0x9d, 0x69, 0x33, 0x76, 0x63, 0x64, 0x6c, 0x37,
	0xd4, 0xa9, 0xea, 0xdc, 0x2f, 0xd0, 0x0d, 0x55, 0x1d, 0x18, 0x3b, 0x85, 0x0a, 0xbe, 0x01, 0x9f,
	0xa0, 0xf2, 0xdd, 0x85, 0x98, 0x08, 0x95, 0x66, 0x40, 0xdc, 0xdd, 0xef, 0x9e, 0xe7, 0x9e, 0xe7,
	0x97, 0x5f, 0x9e, 0x80, 0x72, 0x88, 0x9c, 0xc4, 0x87, 0x26, 0xf6, 0x48, 0xfa, 0x67, 0x44, 0x31,
	0x61, 0x44, 0x05, 0xe2, 0xd4, 0xc0, 0x1e, 0xa9, 0x95, 0xdb, 0xa4, 0x4d, 0xf8, 0xb1, 0x99, 0xae,
	0xc4, 0x8d, 0xda, 0x8c, 0x4b, 0x68, 0x40, 0xa8, 0x2d, 0x0a, 0x62, 0x23, 0x4b, 0x75, 0xb1, 0x33,
	0x1d, 0x48, 0x91, 0x79, 0xb0, 0xe4, 0x20, 0x06, 0x97, 0x4c, 0x97, 0xe0, 0x50, 0xd6, 0xb5, 0x36,
	0x21, 0x6d, 0x1f, 0x99, 0x7c, 0xe7, 0x24, 0xbb, 0x26, 0xc3, 0x01, 0xa2, 0x0c, 0x06, 0x91, 0xb8,
	0xa0, 0x7f, 0x1b, 0x01, 0x53, 0xab, 0xbe, 0x4f, 0x5c, 0xc8, 0x30, 0x09, 0x37, 0x70, 0x80, 0x99,
	0xfa, 0x00, 0x14, 0x3c, 0x14, 0x92, 0xa0, 0xaa, 0xcc, 0x29, 0x0b, 0xc5, 0xc6, 0xf4, 0x65, 0x57,
	0x9b, 0xec, 0xc0, 0xc0, 0x5f, 0xd1, 0xf9, 0xb1, 0x6e, 0x89, 0xb2, 0xfa, 0x5e, 0x01, 0x13, 0x3e,
	0x79, 0x8b, 0x62, 0xdb, 0x4f, 0x71, 0xd5, 0x91, 0x39, 0x65, 0x61, 0xe2, 0xd1, 0x8c, 0x21, 0x15,
	0xa6, 0x9a, 0x0c, 0xa9, 0xc9, 0x58, 0x23, 0x38, 0x6c, 0xac, 0x9f, 0x74, 0xb5, 0xdc, 0x65, 0x57,
	0x53, 0x05, 0x5b, 0x06, 0xab, 0x7f, 0x39, 0xd3, 0xe6, 0xdb, 0x98, 0xed, 0x25, 0x8e, 0xe1, 0x92,
	0x40, 0x9a, 0x94, 0xff, 0x16, 0xa9, 0xb7, 0x6f, 0xb2, 0x4e, 0x84, 0x28, 0xa7, 0xb1, 0x00, 0x07,
	0x0a, 0xad, 0xa9, 0x86, 0x24, 0x8a, 0xae, 0x34, 0xe4, 0x87, 0xd4, 0x90, 0xc1, 0x0e, 0xa7, 0x81,
	0x03, 0xb9, 0x06, 0xfd, 0x87, 0x02, 0x0a, 0xeb, 0x21, 0x8b, 0x3b, 0xea, 0x32, 0x98, 0x88, 0x60,
	0xcc, 0xb0, 0x8b, 0x23, 0x18, 0x32, 0xd9, 0xbf, 0x4a, 0xff, 0xb5, 0x4c, 0x51, 0xb7, 0xb2, 0x57,
	0xd5, 0x43, 0x05, 0xfc, 0xeb, 0x92, 0x20, 0xc0, 0xcc, 0x86, 0x01, 0x49, 0xc2, 0xb4, 0x9b, 0xf9,
	0x3f, 0x3b, 0x79, 0x26, 0x9d, 0x94, 0x05, 0xf7, 0x35, 0x74, 0xea, 0x65, 0xe1, 0x2f, 0xbd, 0x50,
	0x6b, 0x52, 0x60, 0x57, 0x05, 0xb4, 0x3b, 0x0e, 0xf2, 0xad, 0xe6, 0xb6, 0xfa, 0x04, 0x80, 0x28,
	0x26, 0x6f, 0x90, 0xcb, 0x6c, 0xec, 0x71, 0x2f, 0xa3, 0x8d, 0x3b, 0x97, 0x5d, 0xad, 0x24, 0xbd,
	0x5c, 0xd5, 0x74, 0xab, 0x28, 0x37, 0x2d, 0x4f, 0xfd, 0xa4, 0x80, 0x0a, 0x23, 0xfb, 0x28, 0xb4,
	0x77, 0x49, 0x6c, 0x7b, 0x98, 0xb2, 0x18, 0x3b, 0x49, 0x3a, 0x5c, 0xb7, 0x3b, 0x7a, 0x21, 0x1d,
	0xcd, 0x8a, 0x17, 0x6e, 0xa6, 0x19, 0xce, 0x5a, 0x99, 0x93, 0x3c, 0x25, 0x71, 0x33, 0x43, 0xa1,
	0x7e, 0x56, 0x40, 0x95, 0x11, 0x06, 0xfd, 0x3e, 0x33, 0xf2, 0x7a, 0x8d, 0xcf, 0xdf, 0x26, 0x73,
	0x47, 0xca, 0xd4, 0x7a, 0x32, 0x6f, 0x26, 0x1a, 0x4e, 0x68, 0x85, 0xd3, 0x34, 0xfb, 0x2c, 0xe2,
	0xd3, 0x50, 0x3f, 0x2a, 0xe0, 0x7f, 0xd1, 0x08, 0x1f, 0x53, 0x86, 0xc3, 0xb6, 0x1d, 0xc5, 0xd8,
	0x45, 0xd5, 0xd1, 0xdb, 0x54, 0x6e, 0x49, 0x95, 0xb5, 0x6c, 0x33, 0xaf, 0x71, 0x0c, 0x27, 0xb0,
	0xc4, 0x19, 0x36, 0x04, 0xc1, 0xf3, 0x14, 0x9f, 0x4e, 0x08, 0xf6, 0x88, 0x4d, 0x19, 0x64, 0x09,
	0xad, 0x16, 0x06, 0x27, 0xa4, 0x5f, 0xd3, 0xad, 0x22, 0xf6, 0xc8, 0x0e, 0x5f, 0xab, 0x6d, 0x30,
	0x0d, 0xaf, 0x12, 0x47, 0x7e, 0x6d, 0xc7, 0xb8, 0x9b, 0x7b, 0x46, 0x3f, 0x0b, 0x8d, 0x81, 0x54,
	0x6a, 0x68, 0xd2, 0xcf, 0x5d, 0x41, 0x3e, 0x48, 0xa1, 0x5b, 0x53, 0x70, 0x20, 0xc7, 0x5e, 0x01,
	0x40, 0x19, 0x8c, 0x99, 0x9d, 0x86, 0x5e, 0x75, 0x9c, 0x27, 0x43, 0xcd, 0x10, 0x89, 0x68, 0xf4,
	0x12, 0xd1, 0x78, 0xd9, 0x4b, 0xc4, 0xc6, 0xac, 0x7c, 0x41, 0xca, 0xef, 0x63, 0xf5, 0xa3, 0x33,
	0x4d, 0xb1, 0x8a, 0xfc, 0x20, 0xbd, 0xae, 0x6e, 0x81, 0x71, 0x14, 0xb2, 0x18, 0x23, 0x5a, 0xfd,
	0x87, 0x2b, 0xbf, 0x9f, 0x55, 0xde, 0x6a, 0x6e, 0x1b, 0xeb, 0xa2, 0xcc, 0x63, 0xa1, 0x51, 0x91,
	0xc4, 0xff, 0x09, 0x62, 0x09, 0xd5, 0xad, 0x1e, 0x49, 0x6d, 0x13, 0x4c, 0x66, 0x01, 0xea, 0x34,
	0xc8, 0xef, 0xa3, 0x8e, 0xc8, 0x0f, 0x2b, 0x5d, 0xaa, 0xf3, 0xa0, 0x70, 0x00, 0xfd, 0x04, 0xc9,
	0x90, 0x2d, 0x65, 0xdf, 0xe3, 0x18, 0x4b, 0xd4, 0x57, 0x46, 0x96, 0x95, 0x95, 0xd9, 0xc3, 0x63,
	0x2d, 0xf7, 0xe1, 0x58, 0xcb, 0x7d, 0xff, 0xba, 0x58, 0xb2, 0x90, 0x8f, 0x20, 0x45, 0x9b, 0xc8,
	0xdd, 0x83, 0x21, 0xa6, 0x41, 0xab, 0xb1, 0x76, 0x72, 0x5e, 0x57, 0x4e, 0xcf, 0xeb, 0xca, 0xaf,
	0xf3, 0xba, 0x72, 0x74, 0x51, 0xcf, 0x9d, 0x5e, 0xd4, 0x73, 0x3f, 0x2f, 0xea, 0xb9, 0xd7, 0x0f,
	0x33, 0xd3, 0x20, 0x1e, 0x58, 0xf4, 0xa1, 0x43, 0xe5, 0xda, 0x7c, 0xc7, 0x7f, 0xba, 0xf8, 0x50,
	0x38, 0x63, 0xbc, 0x81, 0x8f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x11, 0x6e, 0xf4, 0xae, 0xd5,
	0x06, 0x00, 0x00,
}

func (m *AllocationLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UpperLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIdo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LowerLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIdo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintIdo(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitAmount) > 0 {
		for iNdEx := len(m.CommitAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommitAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintIdo(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IDO) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDO) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDO) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for k := range m.Entries {
			v := m.Entries[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintIdo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintIdo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintIdo(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	if len(m.AllocationLimit) > 0 {
		for iNdEx := len(m.AllocationLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllocationLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.IdoStatus != 0 {
		i = encodeVarintIdo(dAtA, i, uint64(m.IdoStatus))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenListingPrice) > 0 {
		for iNdEx := len(m.TokenListingPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenListingPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TotalDistributedAmount) > 0 {
		for iNdEx := len(m.TotalDistributedAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDistributedAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenForDistribution) > 0 {
		for iNdEx := len(m.TokenForDistribution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenForDistribution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ProjectId != 0 {
		i = encodeVarintIdo(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdo(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocationLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovIdo(uint64(l))
	}
	l = m.LowerLimit.Size()
	n += 1 + l + sovIdo(uint64(l))
	l = m.UpperLimit.Size()
	n += 1 + l + sovIdo(uint64(l))
	return n
}

func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovIdo(uint64(l))
	}
	if len(m.CommitAmount) > 0 {
		for _, e := range m.CommitAmount {
			l = e.Size()
			n += 1 + l + sovIdo(uint64(l))
		}
	}
	return n
}

func (m *IDO) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovIdo(uint64(m.ProjectId))
	}
	if len(m.TokenForDistribution) > 0 {
		for _, e := range m.TokenForDistribution {
			l = e.Size()
			n += 1 + l + sovIdo(uint64(l))
		}
	}
	if len(m.TotalDistributedAmount) > 0 {
		for _, e := range m.TotalDistributedAmount {
			l = e.Size()
			n += 1 + l + sovIdo(uint64(l))
		}
	}
	if len(m.TokenListingPrice) > 0 {
		for _, e := range m.TokenListingPrice {
			l = e.Size()
			n += 1 + l + sovIdo(uint64(l))
		}
	}
	if m.IdoStatus != 0 {
		n += 1 + sovIdo(uint64(m.IdoStatus))
	}
	if len(m.AllocationLimit) > 0 {
		for _, e := range m.AllocationLimit {
			l = e.Size()
			n += 1 + l + sovIdo(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovIdo(uint64(l))
	if len(m.Entries) > 0 {
		for k, v := range m.Entries {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovIdo(uint64(len(k))) + 1 + l + sovIdo(uint64(l))
			n += mapEntrySize + 1 + sovIdo(uint64(mapEntrySize))
		}
	}
	return n
}

func sovIdo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdo(x uint64) (n int) {
	return sovIdo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocationLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LowerLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpperLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitAmount = append(m.CommitAmount, types.Coin{})
			if err := m.CommitAmount[len(m.CommitAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDO) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDO: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDO: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenForDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenForDistribution = append(m.TokenForDistribution, types.Coin{})
			if err := m.TokenForDistribution[len(m.TokenForDistribution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDistributedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDistributedAmount = append(m.TotalDistributedAmount, types.Coin{})
			if err := m.TotalDistributedAmount[len(m.TotalDistributedAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenListingPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenListingPrice = append(m.TokenListingPrice, types.Coin{})
			if err := m.TokenListingPrice[len(m.TokenListingPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdoStatus", wireType)
			}
			m.IdoStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdoStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocationLimit = append(m.AllocationLimit, AllocationLimit{})
			if err := m.AllocationLimit[len(m.AllocationLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = make(map[string]Entry)
			}
			var mapkey string
			mapvalue := &Entry{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIdo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthIdo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthIdo
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthIdo
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Entry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIdo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthIdo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Entries[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIdo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdo = fmt.Errorf("proto: unexpected end of group")
)
